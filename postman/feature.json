{
	"info": {
		"_postman_id": "c7b5c495-9a6e-479c-adcf-0ee7c970d226",
		"name": "Test Explore With Me - Feature comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27258475"
	},
	"item": [
		{
			"name": "Добавление комментария на неопубликованное событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        let event = await api.addEvent(eventUser.id, eventBody);   \r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.request.removeQueryParams(['eventId']);\r",
							"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(rnd.getComment()),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }    \r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "0",
							"description": "(Required) id события"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария без обязательного query params",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const submittedUser = await api.addUser(rnd.getUser());\r",
							"        pm.request.removeQueryParams(['eventId']);\r",
							"        pm.collectionVariables.set('uid', submittedUser.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "0",
							"description": "(Required) id события",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление комментария с пустым полем text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(eventUser.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        pm.request.removeQueryParams(['eventId']);\r",
							"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
							"        comment = rnd.getComment();\r",
							"        comment[\"text\"] = '';\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(comment),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }    \r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "0"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        let event = await api.addEvent(eventUser.id, eventBody);   \r",
							"        event = await api.publishEvent(event.id);     \r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const comment = rnd.getComment();\r",
							"        pm.request.removeQueryParams(['eventId']);\r",
							"        pm.request.addQueryParams([`eventId=` + event.id]);   \r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify(comment),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);  \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);   \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, eventId, autorName, createdOn, edited\", function () {\r",
							"    pm.expect(target).to.have.all.keys('id', 'text', 'eventId', 'authorName', 'createdOn', 'edited');\r",
							"});\r",
							"\r",
							"pm.test(\"Id ивента в запросе и в ответе должны совпадать\", function () {\r",
							"    pm.expect(target.eventId.toString()).equal(pm.collectionVariables.get('eid').toString());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "0",
							"description": "(Required) id события"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев текущего пользователя на всех событиях",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());     \r",
							"        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event1 = await api.publishEvent(event1.id);\r",
							"        let event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"        const submittedUser = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(submittedUser.id, event1.id, rnd.getComment());\r",
							"        const comment2 = await api.addComment(submittedUser.id, event2.id, rnd.getComment());\r",
							"        pm.collectionVariables.set('uid', submittedUser.id);\r",
							"        pm.collectionVariables.set('response1', comment1);\r",
							"        pm.collectionVariables.set('response2', comment2);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const targets = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Ответ должен содержать список из двух комментариев\", function() {\r",
							"    pm.expect(targets.length).equal(2);\r",
							"});\r",
							"\r",
							"const target1 = targets[0];\r",
							"pm.test(\"Комментарий #1 должен содержать поля: id, text, eventId, authorName, createdOn, edited\", function () {\r",
							"    pm.expect(target1).to.have.all.keys('id', 'text', 'eventId', 'authorName', 'createdOn', 'edited');\r",
							"});\r",
							"\r",
							"const source1 = pm.collectionVariables.get('response1');\r",
							"pm.test(\"Данные в ответе #1 должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source1.id).equal(target1.id, 'Идентификатор комментария к событию должен соответствовать идентификатору запроса, созданного ранее');\r",
							"    pm.expect(source1.authorName).equal(target1.authorName, 'Имя пользователя, возвращаемое в ответе, должно соответствовать указанному пользователю');\r",
							"    pm.expect(source1.eventId).equal(target1.eventId, 'Идентификатор события, комментарий к которому запрашивает пользователь, должно соответствовать идентификатору события, к которому пользователь создавал комментарий');\r",
							"    pm.expect(source1.created).equal(target1.created, 'Время создания комментария должно соответствовать времени создания комментария, созданного ранее указанным пользователем');\r",
							"});\r",
							"\r",
							"const target2 = targets[1];\r",
							"pm.test(\"Комментарий #2 должен содержать поля: id, text, eventId, authorName, createdOn, edited\", function () {\r",
							"    pm.expect(target2).to.have.all.keys('id', 'text', 'eventId', 'authorName', 'createdOn', 'edited');\r",
							"});\r",
							"\r",
							"const source2 = pm.collectionVariables.get('response2');\r",
							"pm.test(\"Данные в ответе #2 должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source2.id).equal(target2.id, 'Идентификатор комментария к событию должен соответствовать идентификатору запроса, созданного ранее');\r",
							"    pm.expect(source2.authorName).equal(target2.authorName, 'Имя пользователя, возвращаемое в ответе, должно соответствовать указанному пользователю');\r",
							"    pm.expect(source2.eventId).equal(target2.eventId, 'Идентификатор события, комментарий к которому запрашивает пользователь, должно соответствовать идентификатору события, к которому пользователь создавал комментарий');\r",
							"    pm.expect(source2.created).equal(target2.created, 'Время создания комментария должно соответствовать времени создания комментария, созданного ранее указанным пользователем');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев текущего пользователя на указанном событии",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);        \r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user1 = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        pm.request.removeQueryParams(['eventId']);\r",
							"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
							"        pm.collectionVariables.set('uid', user1.id);\r",
							"        pm.collectionVariables.set('response', comment1);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const targets = pm.response.json();\r",
							"const target = targets[0];\r",
							"\r",
							"pm.test(\"Ответ должен содержать только один комментарий\", function() {\r",
							"    pm.expect(targets.length).equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, eventId, autorName, createdOn, edited\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('edited');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equal(target.id, 'Идентификатор комментария к событию должен соответствовать идентификатору запроса, созданного ранее');\r",
							"    pm.expect(source.authorName).equal(target.authorName, 'Имя пользователя, возвращаемое в ответе, должно соответствовать указанному пользователю');\r",
							"    pm.expect(source.eventId).equal(target.eventId, 'Идентификатор события, комментарий к которому запрашивает пользователь, должно соответствовать идентификатору события, к которому пользователь создавал комментарий');\r",
							"    pm.expect(source.created).equal(target.created, 'Время создания комментария должно соответствовать времени создания комментария, созданного ранее указанным пользователем');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "0"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев на указанном событии",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);        \r",
							"        let event = await api.addEvent(eventUser.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user1 = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('response1', comment1);\r",
							"        pm.collectionVariables.set('response2', comment2);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const targets = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать список из двух комментариев\", function() {\r",
							"    pm.expect(targets.length).equal(2);\r",
							"});\r",
							"\r",
							"const target1 = targets[0];\r",
							"pm.test(\"Комментарий #1 должен содержать поля: id, text, eventId, authorName, createdOn, edited\", function () {\r",
							"    pm.expect(target1).to.have.all.keys('id', 'text', 'eventId', 'authorName', 'createdOn', 'edited');\r",
							"});\r",
							"\r",
							"const source1 = pm.collectionVariables.get('response1');\r",
							"pm.test(\"Данные в ответе #1 должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source1.id).equal(target1.id, 'Идентификатор комментария к событию должен соответствовать идентификатору запроса, созданного ранее');\r",
							"    pm.expect(source1.authorName).equal(target1.authorName, 'Имя пользователя, возвращаемое в ответе, должно соответствовать указанному пользователю');\r",
							"    pm.expect(source1.eventId).equal(target1.eventId, 'Идентификатор события, комментарий к которому запрашивает пользователь, должно соответствовать идентификатору события, к которому пользователь создавал комментарий');\r",
							"    pm.expect(source1.created).equal(target1.created, 'Время создания комментария должно соответствовать времени создания комментария, созданного ранее указанным пользователем');\r",
							"});\r",
							"\r",
							"const target2 = targets[1];\r",
							"pm.test(\"Комментарий #2 должен содержать поля: id, text, eventId, authorName, createdOn, edited\", function () {\r",
							"    pm.expect(target2).to.have.all.keys('id', 'text', 'eventId', 'authorName', 'createdOn', 'edited');\r",
							"});\r",
							"\r",
							"const source2 = pm.collectionVariables.get('response2');\r",
							"pm.test(\"Данные в ответе #2 должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source2.id).equal(target2.id, 'Идентификатор комментария к событию должен соответствовать идентификатору запроса, созданного ранее');\r",
							"    pm.expect(source2.authorName).equal(target2.authorName, 'Имя пользователя, возвращаемое в ответе, должно соответствовать указанному пользователю');\r",
							"    pm.expect(source2.eventId).equal(target2.eventId, 'Идентификатор события, комментарий к которому запрашивает пользователь, должно соответствовать идентификатору события, к которому пользователь создавал комментарий');\r",
							"    pm.expect(source2.created).equal(target2.created, 'Время создания комментария должно соответствовать времени создания комментария, созданного ранее указанным пользователем');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение своего комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const submittedUser = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set('uid', submittedUser.id);        \r",
							"        pm.collectionVariables.set(\"cid\",  Number(comment.id));\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                text: rnd.getComment().text\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, eventId, autorName, createdOn, edited\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"pm.expect(target).to.have.property('authorName');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('edited');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.text).equal(target.text, 'Текст комментария должен совпадать с отправленным');\r",
							"});\r",
							"\r",
							"pm.test(\"Поле edited ответа должно иметь значение true\", function () {    \r",
							"    pm.expect(target.edited).equal(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария добавленного другим пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const submittedUser = await api.addUser(rnd.getUser());\r",
							"        const comment = await api.addComment(submittedUser.id, event.id, rnd.getComment());\r",
							"        pm.collectionVariables.set('uid', user.id);        \r",
							"        pm.collectionVariables.set(\"cid\",  Number(comment.id));\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                text: rnd.getComment().text\r",
							"            }),\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление своего комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);        \r",
							"        let event = await api.addEvent(eventUser.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user1 = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        const findedComment = await api.findComment(comment1.id);\r",
							"        pm.collectionVariables.set(\"uid\", user1.id)\r",
							"        pm.collectionVariables.set(\"cid\", comment1.id)\r",
							"        pm.collectionVariables.set(\"response\", findedComment)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"source = pm.collectionVariables.get('response');\r",
							"commId = pm.collectionVariables.get('cid');\r",
							"\r",
							"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
							"    pm.expect(source.id).equal(commId, 'Идентификатор комментария должен совпадать с удаляемым');\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + commId,\r",
							"            method: 'GET',\r",
							"        }, (error, response) => {\r",
							"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
							"                pm.expect(response.code).to.eql(404);\r",
							"            });\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);        \r",
							"        let event = await api.addEvent(eventUser.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user1 = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        const findedComment = await api.findComment(comment1.id);\r",
							"        pm.collectionVariables.set(\"cid\", comment1.id)\r",
							"        pm.collectionVariables.set(\"response\", findedComment)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"source = pm.collectionVariables.get('response');\r",
							"commId = pm.collectionVariables.get('cid');\r",
							"\r",
							"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
							"    pm.expect(source.id).equal(commId, 'Идентификатор комментария должен совпадать с удаляемым');\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + commId,\r",
							"            method: 'GET',\r",
							"        }, (error, response) => {\r",
							"            pm.test(\"Комментарий не должен быть найден после удаления\", function () {\r",
							"                pm.expect(response.code).to.eql(404);\r",
							"            });\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление чужого комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const eventUser = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);        \r",
							"        let event = await api.addEvent(eventUser.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const user1 = await api.addUser(rnd.getUser());        \r",
							"        const comment1 = await api.addComment(user1.id, event.id, rnd.getComment());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const comment2 = await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        const findedComment = await api.findComment(comment2.id);\r",
							"        pm.collectionVariables.set(\"uid\", user1.id)\r",
							"        pm.collectionVariables.set(\"cid\", comment2.id)\r",
							"        pm.collectionVariables.set(\"response\", findedComment)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
							"    pm.response.to.be.notFound;\r",
							"});\r",
							"\r",
							"source = pm.collectionVariables.get('response');\r",
							"commId = pm.collectionVariables.get('cid');\r",
							"\r",
							"pm.test(\"Комментарий должен быть найден до удаления\", function () {\r",
							"    pm.expect(source.id).equal(commId, 'Идентификатор комментария должен совпадать с удаляемым');\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + commId,\r",
							"            method: 'GET',\r",
							"        }, (error, response) => {\r",
							"            pm.test(\"Комментарий должен быть найден после попытки удаления\", function () {\r",
							"                pm.expect(response.code).to.eql(200);\r",
							"            });\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "commentId",
							"value": "{{cid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/comments?eventId=' + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findComment(commId, verbose=null) {",
					"        return this.get('/comments/' + commId, null, \"Ошибка при поиске комментария по id\", verbose);",
					"    }   ",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}').slice(0, 1000)",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "cid",
			"value": ""
		},
		{
			"key": "response1",
			"value": ""
		},
		{
			"key": "response2",
			"value": ""
		}
	]
}